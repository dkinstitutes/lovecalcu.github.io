@charset "UTF-8";
@import url('https://fonts.googleapis.com/css?family=Arimo');

/* body {
    background-color: #16fff3;
    background-image: linear-gradient(#2534ff, rgb(4, 238, 187));
    min-height: 100vh;
} */

h1 {
    font-size: 24px;
    margin: 0;
}

#wrapper {
    display: flex;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    flex-direction: column;
    padding: 1em;
    box-sizing: border-box;
}

.card {
    background-color: #16fff3;
    background-image: linear-gradient(#16fff3,blue);
    margin: 1em;
    padding: 1em;
    padding-bottom: 0;
    box-sizing: border-box;
    border-radius: 4px;
    overflow: hidden;
    box-shadow: 0px 4px 8px 0px rgba(33,33,33,0.15), 0px 6px 10px 0px rgba(33,33,33,0.15);
    font-family: "Arimo", sans-serif;
    height: 400px;
    width: 100%;
    opacity: 1;
    border-radius: 15px;
    margin-top: 0px;


}

input[type=text] {
    padding: 0;
    line-height: 2;
    width: 100%;
    box-sizing: border-box;
    font-size: 18px;
    outline: none;
    border: 0px;
    margin-bottom: 1px;
    border-bottom: 1px #b0b0b0 solid;
    border-radius: 10px;
}

input[type=text]:focus {
    border-bottom: 2px #E91E63 solid;
    margin-bottom: 0px;
    transition: all 500ms ease;
}

button {
  background-color: #16fff3;
  background-image: linear-gradient(#16fff3,blue);
    color: white;
    outline: none;  
    font-family: "Arimo", sans-serif;
    border: 0;
    border-radius: 4px;
    line-height: 2.5;
    padding: 0 1em;
    margin: 0;
    text-transform: uppercase;
    box-shadow: 0px 4px 8px 0px rgba(33,33,33,0.15), 0px 6px 10px 0px rgba(33,33,33,0.15);
    transition: all ease 500ms;
    position: relative;
}

button:hover {
    background: #FF3E83;
    box-shadow: 0px 6px 10px 0px rgba(33,33,33,0.15), 0px 6px 10px 0px rgba(33,33,33,0.15);
    top: -1px;
}

button:active {
    top: 1px;
    background: #C90043;
}

.align-right {
    text-align: right;
}

#warning {
    color: red;
    opacity: 0;
}

#results {
    display: none;
}

#calculating {
    color: white;
    font-family: "Arimo", sans-serif;
    font-weight: bold;
}

#loading {
    margin: 0 auto;
}

.material-spinner {
    /* The height and width can be
    whatever you want, so long as
    you adjust the border radius
    to compensate. I added a 
    "max-height" because for some
    reason the spinner was
    "squishing" when I resized the
    screen vertically. "max-height"
    fixed this. */
    height: 50px;
    min-height: 50px;
    width: 50px;
    /* "border-radius" defines how
    much "curve" there is on the
    edge of a square element. If
    you give it enough curve, it
    makes the element appear to be
    circular. */
    border-radius: 100px;
    /* So there's a five pixel
    transparent solid border
    around a 50px square box, which
    has edges curved so much that
    it looks circular... */
    border: 5px transparent solid;
    /* ... with one side, the top
    border, given a color. This
    creates the quarter-circle 
    curve. */
    border-top: 5px #3F51B5 solid;
    /* "animation" specifies an
    animation to use on the element,
    including how long the animation
    should take, how many times it 
    should play, and even whether 
    or not it should ease into the
    different steps of the animation.
    By default the animation eases,
    which is what we want for our
    Google-esque spinner, so we 
    don't need to set that. 
    
    The "material-spinner" part is
    the name of the animation that 
    we want to use. We could've
    called it "funky-bunny" or
    anything else so long as we 
    use the same name when
    specifying the keyframes. */
    -webkit-animation: material-spinner 4s infinite;
            animation: material-spinner 4s infinite;
}

@-webkit-keyframes material-spinner {
    /* "material-spinner" is the name
    of the animation. Each percentage
    represents an individual step
    in the animation. The transform
    rotation needs to increase from
    0 throughout. If you did 
    "rotate(0deg)" then 
    "rotate(180deg)" and then 
    "rotate(0deg)" back again,
    instead of continously spinning
    right, it would spin right,
    then left, then right.*/ 
    0% {
        transform: rotate(0deg);
        border-top: 5px #CBFF74 solid;
    }
    25% {
        transform: rotate(360deg);
        border-top: 5px #E8B85F solid;
    }
    50% {
        transform: rotate(720deg);
        border-top: 5px #8D5EE8 solid;
    }
    75% {
        transform: rotate(1080deg);
        border-top: 5px #69EBFF solid;
    }
    100% {
        transform: rotate(1440deg);
        border-top: 5px #CBFF74 solid;
    }
}

@keyframes material-spinner {
    /* "material-spinner" is the name
    of the animation. Each percentage
    represents an individual step
    in the animation. The transform
    rotation needs to increase from
    0 throughout. If you did 
    "rotate(0deg)" then 
    "rotate(180deg)" and then 
    "rotate(0deg)" back again,
    instead of continously spinning
    right, it would spin right,
    then left, then right.*/ 
    0% {
        transform: rotate(0deg);
        border-top: 5px #CBFF74 solid;
    }
    25% {
        transform: rotate(360deg);
        border-top: 5px #E8B85F solid;
    }
    50% {
        transform: rotate(720deg);
        border-top: 5px #8D5EE8 solid;
    }
    75% {
        transform: rotate(1080deg);
        border-top: 5px #69EBFF solid;
    }
    100% {
        transform: rotate(1440deg);
        border-top: 5px #CBFF74 solid;
    }
}

#calculating {
    display: none;
}



/* 
$content-width will be the max width of the content within the navigation bar. 
$breakpoint determines at which width the media query breakpoint will take effect.
*/
nav {
  float: right;
}

nav ul {
  list-style: none;
  margin: 0;
  padding: 0;
}

nav ul li {
  float: left;
  position: relative;
}

nav ul li a {
  display: block;
  padding: 0 20px;
  line-height: 70px;
  background: #ffffff;
  color: #463f3f;
  text-decoration: none;
  /*
  The full path of this code is nav ul li a:not(:only-child):after. This means that the code will apply to any a tag in our nav list that is NOT an only child, aka any dropdown. The :after means it comes after the output of the tag. I’ve decided that to specify any nav item as a dropdown, it will be followed by a unicode arrow – ▾ (#9662).
  */
}

nav ul li a:hover {
  background: #f2f2f2;
  color: #fb5958;
}

nav ul li a:not(:only-child):after {
  padding-left: 4px;
  content: " ▾";
}

nav ul li ul li {
  min-width: 190px;
}

nav ul li ul li a {
  padding: 15px;
  line-height: 20px;
}

.nav-dropdown {
  position: absolute;
  z-index: 1;
  /* Guarantees that the dropdown will display on top of any content. */
  box-shadow: 0 3px 12px rgba(0, 0, 0, 0.15);
  display: none;
}

.nav-mobile {
  display: none;
  position: absolute;
  top: 0;
  right: 0;
  background: #fff;
  height: 70px;
  width: 70px;
}

@media only screen and (max-width: 800px) {
  .nav-mobile {
    display: block;
  }

  nav {
    width: 100%;
    padding: 70px 0 15px;
  }

  nav ul {
    display: none;
  }

  nav ul li {
    float: none;
  }

  nav ul li a {
    padding: 15px;
    line-height: 20px;
  }

  nav ul li ul li a {
    padding-left: 30px;
    text-decoration: none;
      color: blue;
  }
}
#nav-toggle {
  position: absolute;
  left: 18px;
  top: 22px;
  cursor: pointer;
  padding: 10px 35px 16px 0px;
}

#nav-toggle span,
#nav-toggle span:before,
#nav-toggle span:after {
  cursor: pointer;
  border-radius: 1px;
  height: 5px;
  width: 35px;
  background: #463f3f;
  position: absolute;
  display: block;
  content: "";
  transition: all 300ms ease-in-out;
}

#nav-toggle span:before {
  top: -10px;
}

#nav-toggle span:after {
  bottom: -10px;
}

#nav-toggle.active span {
  background-color: transparent;
}

#nav-toggle.active span:before, #nav-toggle.active span:after {
  top: 0;
}

#nav-toggle.active span:before {
  transform: rotate(45deg);
}

#nav-toggle.active span:after {
  transform: rotate(-45deg);
}

@media screen and (min-width: 800px) {
  .nav-list {
    display: block !important;
  }
}
/* 
.navigation – the outer wrapper for the navbar. Specifies the height and color, and will stretch the full width of the viewport.
*/
.navigation {
  height: 70px;
  background: #ffffff;
}

/*
.nav-container – the inner wrapper for the navbar. Defines how far the actual content should stretch.
*/
.nav-container {
  max-width: 1000px;
  margin: 0 auto;
}

.brand {
  position: absolute;
  padding-left: 20px;
  float: left;
  line-height: 70px;
  /* text-transform: uppercase; */
  font-size: 1.4em;
}

.brand a,
.brand a:visited {
  color: #463f3f;
  text-decoration: none;
}

